AWSTemplateFormatVersion: '2010-09-09'

Description: Blue-Green Deployment Test on ECS-Fargate

Parameters:
  RepositoryName:
    Type: String
  GitHubRepo:
    Type: String
    Default: blue-green-test
  BranchName:
    Type: String
    Default: master
  ComputeType:
    Type: String
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Default: BUILD_GENERAL1_SMALL

  CodeBuildImage:
    Type: String
    Default: aws/codebuild/amazonlinux2-x86_64-standard:3.0



Resources:
  CodePipelineManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:PutObject*
            Resource: '*'


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - !Ref CodePipelineManagedPolicy
      Policies:
        - PolicyName: CodeBuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                   - codebuild:StartBuild
                   - codebuild:BatchGetBuilds
                Resource:
                   - !GetAtt BuildProject.Arn
              - Effect: Allow
                Action: 
                   - "cloudformation:*"
                Resource: "*"
        - PolicyName: CodeDeploy   
          PolicyDocument:
            Version: 2012-10-17
            Statement:  
              - Effect: Allow
                Action: 
                   - "codedeploy:*"
                Resource: "*"  
        - PolicyName: ECS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # ECS Deployments
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Action:
                  - ecs:DescribeTaskDefinition
                  - ecs:RegisterTaskDefinition
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:UpdateService
                Resource: '*'
                Condition:
                  ArnEquals:
                    ecs:cluster: !Sub arn:aws:ecs:us-east-1:${AWS::AccountId}:cluster/blue-green-test-cluster 
                    


  CloudFormationServiceRole:
    # This Role will actually do all of the heavy lifting and resouce
    # creation
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: CloudformationAccess
          PolicyDocument:
            # This policy defines what the users can actually do
            # With Cloudformation
            Version: 2012-10-17
            Statement:
              - 
                Effect: Allow
                Action: "*"
                Resource: "*"                  

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Name: !Sub ${GitHubRepo}
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: source
              Configuration:
                Owner: "umitseremet"
                Repo: !Sub ${GitHubRepo}
                Branch: !Sub ${BranchName}
                OAuthToken: "{{resolve:secretsmanager:GitHubPersonalAccessTokenUmitForTest:SecretString:GitHubPersonalAccessTokenUmitForTest}}"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: source
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              OutputArtifacts:
                - Name: build
              RunOrder: 1
        - Name: CreateChangeSet
          Actions:
            - Name: CreateChangeSet
              InputArtifacts:
                - Name: build
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub ${GitHubRepo}-ecs
                Capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM
                ChangeSetName: update
                RoleArn: !GetAtt  CloudFormationServiceRole.Arn
                TemplatePath: 'build::cloudformation/ecs.yml'
                TemplateConfiguration: 'build::cloudformation/stack-config.json'

        - Name: ExecuteChangeSet
          Actions:
            - Name: ExecuteChangeSet
              InputArtifacts:
                - Name: build
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub ${GitHubRepo}-ecs
                Capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM
                ChangeSetName: update
              RunOrder: 1
  
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${GitHubRepo}
                  - !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/node
              - Action: ecr:GetAuthorizationToken
                Effect: Allow
                Resource: "*"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"  
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Effect: Allow  
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub ${ArtifactBucket.Arn}/*
  
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${GitHubRepo}-ci
      Description: Build war file for rest application
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE 
        Type: LOCAL   
      Environment:  
        ComputeType: !Ref ComputeType
        Image: !Ref CodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: GITHUBREPO
            Value: !Sub ${GitHubRepo}
          - Name: REGION
            Value: ${AWS::Region}
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/umitseremet/${GitHubRepo}.git
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - AWS_ACCOUNT_ID=`echo $CODEBUILD_BUILD_ARN | awk -F":" '{print $5}'`
                - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/${GITHUBREPO}
                - export IMAGE_TAG=build-`echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}'`
                - echo $CODEBUILD_RESOLVED_SOURCE_VERSION      
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            install:
              runtime-versions:
                java: corretto11
            build:
              commands:
                - sed -i -e "s/CHANGE_ID/$AWS_ACCOUNT_ID/g" Dockerfile
                - printf '{"ImageURI":"%s"}' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json
                - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
                - docker push $REPOSITORY_URI:$IMAGE_TAG
                - sed -i -e "s/CHANGE_ME/$IMAGE_TAG/g" ./cloudformation/stack-config.json
          artifacts:
            files: 
               - imageDetail.json
               - cloudformation/ecs.yml
               - cloudformation/stack-config.json
      TimeoutInMinutes: 15
      Tags:
        - Key: Name
          Value: !Sub ${GitHubRepo}   

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTieringTransition
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: INTELLIGENT_TIERING
      VersioningConfiguration:
        Status: Enabled

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: 2012-10-17
        Id: SSEandSSLPolicy
        Statement:
          - Sid: Deny unencrypted object uploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Sub ${ArtifactBucket.Arn}/*
            Condition:
              'Null':
                s3:x-amz-server-side-encryption: true
              Bool:
                aws:SecureTransport: false
          - Sid: Deny deleting the dummy artifact
            Effect: Deny
            Principal: '*'
            Action: s3:DeleteObject
            Resource: !Sub ${ArtifactBucket.Arn}/dummy/artifact.zip        